--- a/bolt/vendor/symfony/form/Symfony/Component/Form/Extension/Validator/Constraints/FormValidator.php	2014-08-09 17:29:50.756339900 +0100
+++ b/bolt/vendor/symfony/form/Symfony/Component/Form/Extension/Validator/Constraints/FormValidator.php	2014-08-09 17:30:02.689940400 +0100
@@ -15,6 +15,7 @@
 use Symfony\Component\Form\Extension\Validator\Util\ServerParams;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;
+use Symfony\Component\Validator\Context\ExecutionContextInterface;
 use Symfony\Component\Validator\Exception\UnexpectedTypeException;
 
 /**
@@ -53,7 +54,11 @@
 
         /* @var FormInterface $form */
         $config = $form->getConfig();
-        $validator = $this->context->getValidator()->inContext($this->context);
+        $validator = null;
+
+        if ($this->context instanceof ExecutionContextInterface) {
+            $validator = $this->context->getValidator()->inContext($this->context);
+        }
 
         if ($form->isSynchronized()) {
             // Validate the form data only if transformation succeeded
@@ -62,7 +67,12 @@
             // Validate the data against its own constraints
             if (self::allowDataWalking($form)) {
                 foreach ($groups as $group) {
-                    $validator->atPath('data')->validate($form->getData(), null, $group);
+                    if ($validator) {
+                        $validator->atPath('data')->validate($form->getData(), null, $group);
+                    } else {
+                        // 2.4 API
+                        $this->context->validate($form->getData(), 'data', $group, true);
+                    }
                 }
             }
 
@@ -72,7 +82,12 @@
             foreach ($constraints as $constraint) {
                 foreach ($groups as $group) {
                     if (in_array($group, $constraint->groups)) {
-                        $validator->atPath('data')->validate($form->getData(), $constraint, $group);
+                        if ($validator) {
+                            $validator->atPath('data')->validate($form->getData(), $constraint, $group);
+                        } else {
+                            // 2.4 API
+                            $this->context->validateValue($form->getData(), $constraint, 'data', $group);
+                        }
 
                         // Prevent duplicate validation
                         continue 2;
@@ -101,20 +116,40 @@
                     ? (string) $form->getViewData()
                     : gettype($form->getViewData());
 
-                $this->context->buildViolation($config->getOption('invalid_message'))
-                    ->setParameters(array_replace(array('{{ value }}' => $clientDataAsString), $config->getOption('invalid_message_parameters')))
-                    ->setInvalidValue($form->getViewData())
-                    ->setCode(Form::ERR_INVALID)
-                    ->addViolation();
+                if ($this->context instanceof ExecutionContextInterface) {
+                    $this->context->buildViolation($config->getOption('invalid_message'))
+                        ->setParameters(array_replace(array('{{ value }}' => $clientDataAsString), $config->getOption('invalid_message_parameters')))
+                        ->setInvalidValue($form->getViewData())
+                        ->setCode(Form::ERR_INVALID)
+                        ->addViolation();
+                } else {
+                    // 2.4 API
+                    $this->context->addViolation(
+                        $config->getOption('invalid_message'),
+                        array_replace(array('{{ value }}' => $clientDataAsString), $config->getOption('invalid_message_parameters')),
+                        $form->getViewData(),
+                        null,
+                        Form::ERR_INVALID
+                    );
+                }
             }
         }
 
         // Mark the form with an error if it contains extra fields
         if (count($form->getExtraData()) > 0) {
-            $this->context->buildViolation($config->getOption('extra_fields_message'))
-                ->setParameter('{{ extra_fields }}', implode('", "', array_keys($form->getExtraData())))
-                ->setInvalidValue($form->getExtraData())
-                ->addViolation();
+            if ($this->context instanceof ExecutionContextInterface) {
+                $this->context->buildViolation($config->getOption('extra_fields_message'))
+                    ->setParameter('{{ extra_fields }}', implode('", "', array_keys($form->getExtraData())))
+                    ->setInvalidValue($form->getExtraData())
+                    ->addViolation();
+            } else {
+                // 2.4 API
+                $this->context->addViolation(
+                    $config->getOption('extra_fields_message'),
+                    array('{{ extra_fields }}' => implode('", "', array_keys($form->getExtraData()))),
+                    $form->getExtraData()
+                );
+            }
         }
 
         // Mark the form with an error if the uploaded size was too large
@@ -124,10 +159,19 @@
             $max = $this->serverParams->getPostMaxSize();
 
             if (!empty($max) && $length > $max) {
-                $this->context->buildViolation($config->getOption('post_max_size_message'))
-                    ->setParameter('{{ max }}', $this->serverParams->getNormalizedIniPostMaxSize())
-                    ->setInvalidValue($length)
-                    ->addViolation();
+                if ($this->context instanceof ExecutionContextInterface) {
+                    $this->context->buildViolation($config->getOption('post_max_size_message'))
+                        ->setParameter('{{ max }}', $this->serverParams->getNormalizedIniPostMaxSize())
+                        ->setInvalidValue($length)
+                        ->addViolation();
+                } else {
+                    // 2.4 API
+                    $this->context->addViolation(
+                        $config->getOption('post_max_size_message'),
+                        array('{{ max }}' => $this->serverParams->getNormalizedIniPostMaxSize()),
+                        $length
+                    );
+                }
             }
         }
     }
